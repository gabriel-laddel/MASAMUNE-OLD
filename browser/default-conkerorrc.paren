(require "new-tabs.js")
(require "clicks-in-new-buffer.js")

(setf view_source_use_external_editor t
      editor_shell_command "emacsclient"
      homepage "file:///root/quicklisp/local-projects/masamune/introduction.html"
      minibuffer_auto_complete_default t
      url_completion_use_history t
      download_buffer_automatic_open_target -o-p-e-n_-n-e-w_-b-u-f-f-e-r_-b-a-c-k-g-r-o-u-n-d
      url_completion_use_bookmarks t
      hints_display_url_panel t
      clicks_in_new_buffer_target -o-p-e-n_-n-e-w_-b-u-f-f-e-r_-b-a-c-k-g-r-o-u-n-d) 

(add_hook "mode_line_hook" (mode_line_adder loading_count_widget) t) 
(remove_hook "mode_line_hook" (mode_line_adder clock_widget)) 

(interactive "copy-url" "Copy the current buffer's URL to the clipboard"
	     (lambda (-i)
	       ;; XXX something is wrong with let let bindings, hence setf.
	       (setf text (@ -i window buffers current document location href))
	       (write-to-clipboard text)
	       ((@ -i window minibuffer message) (+ "copied: " text))))

(interactive "reload-config" "reload conkerorrc"
	     (lambda (-i) (load_rc) ((@ -i window minibuffer message) "config reloaded"))) 

(interactive "view-current-buffer-archive" "Visit this url's Waybackmachine archive in the current buffer"
	     (lambda (-i) (load_url_in_current_buffer 
		      (@ -i window buffers current document location href) (new (interactive_context))))) 

(interactive "extensions" "Open the extensions manager in a new tab."
	     (lambda () (load_url_in_new_buffer "chrome://mozapps/content/extensions/extensions.xul?type=extensions"
					   (new (interactive_context))))) 

(interactive "console" "Opens the XUL console in a new tab."
	     (lambda () (load_url_in_new_buffer "chrome://global/content/console.xul"
					   (new (interactive_context))))) 

(define_key default_global_keymap "C-c u" "copy-url") 
(define_key default_global_keymap "C-c r" "reload-config") 
(define_key default_global_keymap "C-x f" "follow-new-buffer-background") 
(define_key content_buffer_normal_keymap "C-f" "forward") 
(define_key content_buffer_normal_keymap "C-b" "back") 
(define_key content_buffer_normal_keymap "M-y" "search-clipboard-contents") 
(define_key content_buffer_normal_keymap "M-Y" "search-clipboard-contents-doublequoted")

;;; state saving facilities
;;; ============================================================================

;; (add_hook "buffer_loaded_hook" (lambda () (dump "buffer_loaded_hook")) nil t)
;; (add_hook "buffer_scroll_hook" (lambda () (dump "buffer_scroll_hook")) nil t)
;; (add_hook "buffer_kill_before_hook" (lambda () (dump "buffer_kill_before_hook")) t t)
;; (add_hook "select_buffer_hook"(lambda () (dump "select_buffer_hook")) nil t)

;; (let* ((a (@ document body scroll-top))
;;        (b (@ document body scroll-height))
;;        (c (@ document body client-height))
;;        (position a)
;;        (max-scroll-top-value (- b c))
;;        (percentage-scrolled (/ a b))))

;;; REPL connection 
;;; ============================================================================

(defvar -cc (@ -components classes)) 
(defvar -ci (@ -components interfaces))
;; (defvar conkeror (chain (aref -cc "@conkeror.mozdev.org/application;1")
;; 			(get-service) wrapped-j-s-object))
(defvar loader (chain (aref -cc "@mozilla.org/moz/jssubscript-loader;1")
		      (get-service (@ -ci moz-i-j-s-sub-script-loader))))
(defvar srv-pref (aref -cc "@mozilla.org/preferences-service;1"))
(defvar srv-observer (aref -cc "@mozilla.org/observer-service;1"))

(defun lg (msg)
  "Log is a reserved symbol - and translates to Math.log"
  (dump
   (+ msg "
")))

(defun -r-e-p-l ()
  ;;  "FIX #37 (https://github.com/bard/mozrepl/issues/37) needed by toolkit >= 17.0
  ;; http://blog.mozilla.org/addons/2012/08/20/exposing-objects-to-content-safely/"
  (setf (@ this __exposed-props__)
	(or (@ this __exposed-props__)
	    (_generate-exposed-props this.__proto__)))
  this)
((@ loader load-sub-script) "file:///root/quicklisp/local-projects/masamune/browser/working-repl/repl.js"
			    (@ -r-e-p-l prototype))

(defvar port 4242)
(ps::inline-js 
 "
function _generateExposedProps(obj) {
    var props = {};
    Object.keys(obj).filter(function (k) k[0] !== '_').
        forEach(function (k) {
            props[k] = 'r';
        });
    return props;
}")

(defvar serv)
(defvar context-window-type)

(defvar sessions
  (create _list (list)
	  add (lambda (session) ((@ this _list push) session))
	  remove (lambda (session)
		   (defvar index ((@ this _list index-of) session))
		   (if (!= index (- 1))
		       ((@ this _list splice) index 1)
		       nil))
	  get (lambda (index) (return (aref (@ this _list) index)))
	  quit (lambda () ((@ this _list for-each) (lambda (session) (@ session quit)))
		 ((@ this _list splice) 0 (@ this _list length)))))

(defun start (port)
  (try (progn (setf serv (chain (aref -cc "@mozilla.org/network/server-socket;1")
				(create-instance (@ -ci ns-i-server-socket))))
	      ((@ serv init) port t (- 1))
	      ((@ serv async-listen) this)
	      (lg (+ "REPL Listening at: 127.0.0.1: " port)))
       (:catch (e) (lg (+ "REPL: error " e)))))

(defun on-socket-accepted (serv transport)
  (try (progn (defvar outstream ((@ transport open-output-stream)
				 (@ -ci ns-i-transport -o-p-e-n_-b-l-o-c-k-i-n-g) 0 0))
	      (defvar outstreamutf8 (chain (aref -cc "@mozilla.org/intl/converter-output-stream;1") 
					   (create-instance (@ -ci ns-i-converter-output-stream))))
	      ((@ outstreamutf8 init) outstream "UTF-8" 0 0)
	      (defvar instream ((@ transport open-input-stream) 0 0 0))
	      (defvar instreamutf8 (chain (aref -cc "@mozilla.org/intl/converter-input-stream;1")
					  (create-instance (@ -ci ns-i-converter-input-stream))))
	      ((@ instreamutf8 init) instream "UTF-8" 1024 0))
       (:catch (e) (lg (+ "REPL ERROR: " e))))
  (defvar context (or (chain (aref -cc "@mozilla.org/appshell/window-mediator;1")
			     (get-service (@ -ci ns-i-window-mediator)) (get-most-recent-window ""))
		      (chain (aref -cc "@mozilla.org/appshell/appShellService;1")
			     (get-service (@ -ci ns-i-app-shell-service)) hidden-d-o-m-window wrapped-j-s-object)))
  (defvar session (new (-r-e-p-l)))
  (setf (@ session on-output) (lambda (string) ((@ outstreamutf8 write-string) string))
	(@ session on-quit) (lambda () (lg (+ "REPL, Client closed connection: " 
					 (@ transport host) ":" (@ transport port)))
			      ((@ instream close))
			      ((@ outstream close))
			      ((@ sessions remove) session)))
  ((@ session init) context)
  (lg (+ "REPL: client connected: " (@ transport host) ":" (@ transport port)
	 ":" context))
  (defvar pump (chain (aref -cc "@mozilla.org/network/input-stream-pump;1")
		      (create-instance (@ -ci ns-i-input-stream-pump))))
  ((@ pump init) instream (- 1) (- 1) 0 0 f)
  ((@ pump async-read)
   (create on-start-request (lambda (request context) (lg "REPL start request"))
	   on-stop-request (lambda (request context status) (lg "REPL stop request")
			     ((@ session quit)))
	   on-data-available (lambda (request context input-stream offset count)
			       (defvar str (create))
			       ((@ instreamutf8 read-string) count str)
			       ((@ session receive) (@ str value))))
   nil) ((@ sessions add) session))

(defun stop ()
  (lg "REPL: closing")
  ((@ serv close))
  ((@ sessions quit))
  (setf serv nil))

(defun is-active ()
  (when serv true))

(defun on-stop-listening (serv status))

(ps::inline-js "function observe(subject, topic, data) {
    switch(topic) {
    case 'profile-after-change':
        srvObserver.addObserver(this, 'network:offline-status-changed', false);
        if(srvPref.getBranch('network.').getBoolPref('online'))
            this.start(port);

        break;
    case 'network:offline-status-changed':
        switch(data) {
        case 'online':
            this.start(port);
            break;
        case 'offline':
            if(isActive())
                this.stop();
            break;
        }
        break;
    case 'quit-application-granted':
	this.stop();
    }
}")

(defun set-context-window-type (window-type)
  (setf context-window-type window-type))

(start port)

;;; broken REPL code 
;;; ============================================================================

;; (ps::inline-js "
;; function onSocketAccepted(serv, transport) {
;;     try {
;;         var outstream = transport.openOutputStream(Ci.nsITransport.OPEN_BLOCKING , 0, 0);
;;         var outstreamutf8 = Cc['@mozilla.org/intl/converter-output-stream;1']
;;             .createInstance(Ci.nsIConverterOutputStream);
;;         outstreamutf8.init(outstream, 'UTF-8', 0, 0);

;;         var instream = transport.openInputStream(0, 0, 0);
;;         var instreamutf8 = Cc['@mozilla.org/intl/converter-input-stream;1']
;;             .createInstance(Ci.nsIConverterInputStream);
;;         instreamutf8.init(instream, 'UTF-8', 1024, 0);
;;     } catch(e) {
;;         lg('E, MOZREPL : Error : ' + e);
;;     }

;;     var context = Cc['@mozilla.org/appshell/window-mediator;1']
;;         .getService(Ci.nsIWindowMediator)
;;         .getMostRecentWindow('');

;;     if(context === null) {
;;         context = Cc['@mozilla.org/appshell/appShellService;1']
;;             .getService(Ci.nsIAppShellService)
;;             .hiddenDOMWindow.wrappedJSObject;
;;     }

;;     var session = new REPL();
;;     session.onOutput = function(string) {
;;         outstreamutf8.writeString(string);
;;     };
;;     session.onQuit = function() {
;;         lg('I, MOZREPL : Client closed connection : ' + transport.host + ':' + transport.port);        
;;         instream.close();
;;         outstream.close();
;;         sessions.remove(session);
;;     };
;;     session.init(context);

;;     lg('I, MOZREPL : Client connected : ' + transport.host + ':' + transport.port +
;;         ' : ' + (context instanceof Ci.nsIDOMWindow ?
;;                  context.document.location.href : context));

;;     var pump = Cc['@mozilla.org/network/input-stream-pump;1']
;;         .createInstance(Ci.nsIInputStreamPump);
;;     pump.init(instream, -1, -1, 0, 0, false);
;;     pump.asyncRead({
;;         onStartRequest: function(request, context) {},
;;         onStopRequest: function(request, context, status) {
;;                 session.quit();
;;             },
;;         onDataAvailable: function(request, context, inputStream, offset, count) {
;;             var str = {}
;;             instreamutf8.readString(count, str)
;;             session.receive(str.value);
;;             }
;;         }, null);

;;     sessions.add(session);
;; }
;; ")

;; (ps::inline-js
;; "
;; function isTopLevel(object) {
;;     return (object instanceof Ci.nsIDOMWindow ||
;;             'wrappedJSObject' in object ||
;;             'NSGetModule' in object ||
;;             'EXPORTED_SYMBOLS' in object ||
;;             (object.__parent__ && 'EXPORTED_SYMBOLS' in object.__parent__));
;; }")

;; (ps::inline-js "
;; function helpUrlFor(thing) {
;;     function mdcXpcomClassUrl(classID) {
;;         return 'https://developer.mozilla.org/en-US/search?q=' + escape('\")'+classID+'\"');
;;     }
;;     function mdcXulElementUrl(element) {
;;         return 'http://developer.mozilla.org/en/XUL/' +
;;             element.nodeName;
;;     }

;;     if(typeof(thing) == 'string') {
;;         if(thing.match(/^@mozilla.org\/))
;;             return mdcXpcomClassUrl(thing);

;;     } else if(thing.QueryInterface &&
;;               (function() {
;;                   var NS_NOINTERFACE = 0x80004002;
;;                   try {
;;                       thing.QueryInterface(Components.interfaces.nsIDOMXULElement);
;;                       return true;
;;                   } catch(e if e.result == NS_NOINTERFACE) {}
;;               })()) {
;;         return mdcXulElementUrl(thing);
;;     }
;; }")

;; (ps::inline-js "function inspect(obj, maxDepth, name, curDepth) {
;; // adapted from ddumpObject() at
;; // http://lxr.mozilla.org/mozilla/source/extensions/sroaming/resources/content/transfer/utility.js

;;     function crop(string, max) {
;;         string = string.match(/^(.+?)(\n|$)/m)[1];
;;         max = max || 70;
;;         return (string.length > max-3) ?
;;             string.slice(0, max-3) + '...' : string;
;;     }

;;     if(name == undefined)
;;         name = '<' + typeof(obj) + '>';
;;     if(maxDepth == undefined)
;;         maxDepth = 0;
;;     if(curDepth == undefined)
;;         curDepth = 0;
;;     if(maxDepth != undefined && curDepth > maxDepth)
;;         return;

;;     var i = 0;
;;     for(var prop in obj) {
;;         if(obj instanceof Ci.nsIDOMWindow &&
;;            (prop == 'java' || prop == 'sun' || prop == 'Packages')) {
;;             print(name + '.' + prop + '=[not inspecting, either \"java\", \"sun\" or \"Packages\"]');
;;             continue;
;;         }

;;         try {
;;             i++;
;;             if(obj[prop] === null)
;;                 print(name + '.' + prop + '=null');
;;             else if(typeof(obj[prop]) == 'object') {
;;                 if(obj.length != undefined)
;;                     print(name + '.' + prop + '=[probably array, length '
;;                                + obj.length + ']');
;;                 else
;;                     print(name + '.' + prop + '=[' + typeof(obj[prop]) + ']');

;;                 this.inspect(obj[prop], maxDepth, name + '.' + prop, curDepth+1);
;;             }
;;             else if(typeof(obj[prop]) == 'function')
;;                 print(name + '.' + prop + '=[function]');
;;             else if(typeof(obj[prop]) == 'xml') {
;;                 let s = obj[prop].toXMLString().replace(/>\n\s*/g, ' ');
;;                 print(name + '.' + prop + '=' + (s.length > 100 ? s.slice(0, 97) + '...' : s));
;;             }
;;             else
;;                 print(name + '.' + prop + '=' + obj[prop]);

;;             if(obj[prop] && obj[prop].doc && typeof(obj[prop].doc) == 'string')
;;                 print('    ' + crop(obj[prop].doc));

;;         } catch(e) {
;;             print(name + '.' + prop + ' - Exception while inspecting.');
;;         }
;;     }
;;     if(!i)
;;         print(name + \" is empty\");
;; }
;; inspect.doc = 'Lists members of a given object.'")

;; (ps::inline-js "function formatStackTrace(exception) {
;;     var trace = '';
;;     if(exception.stack) {
;;         var calls = exception.stack.split('\n');
;;         for each(var call in calls) {
;;             if(call.length > 0) {
;;                 call = call.replace(/\\n/g, '\n');

;;                 if(call.length > 200)
;;                     call = call.substr(0, 200) + '[...]\n';

;;                 trace += call.replace(/^/mg, '\t') + '\n';
;;             }
;;         }
;;     }
;;     return trace;
;; }")

;; (defun doc-for (thing)
;;   (defvar printout "")
;;   (setf printout (+ (+ "TYPE: " (typeof thing)) "n"))
;;   (if (@ thing name)
;;       (setf printout (+ (+ "NAME: " (@ thing name)) "n"))
;;       (progn
;; 	(when (@ thing node-name)
;; 	  (setf printout (+ (+ (+ printout "NODENAME: ") (@ thing node-name)) "n")))
;; 	nil))
;;   (when (equal (typeof thing) "function")
;;     (defvar list (arg-list thing))
;;     (incf printout
;; 	  (+
;; 	   (+ "ARGS: "
;; 	      (if (equal (@ list length) 0)
;; 		  "[none declared]"
;; 		  ((@ list join) ", ")))
;; 	   "n"))
;;     nil)
;;   (when (and (@ thing doc) (equal (typeof (@ thing doc)) "string"))
;;     (setf printout (+ (+ (+ printout "n") (@ thing doc)) "n")))
;;   (return printout))

;; (ps::inline-js
;;  "
;; function print(data, appendNewline) {
;;     var string = data == undefined ?
;;         '\n' :
;;         data + (appendNewline == false ? '' : '\n');
;; }")

;; (defun doc (thing)
;;   "Looks up documentation for a given object"
;;   (print ((@ util doc-for) thing))
;;   (defvar url ((@ util help-url-for) thing))
;;   (if url
;;       (progn
;; 	(print "Online help found, displaying...")
;; 	(chain (aref -cc "@mozilla.org/embedcomp/window-watcher;1") 
;; 	       (get-service (@ -ci ns-i-window-watcher))
;; 	       (open-window nil url "help" (+ "width=640,height=600,scrollbars=yes,menubars=no," "toolbar=no,location=no,status=no,resizable=yes") nil)))
;;       nil))

;; (ps::inline-js "
;; function represent(thing) {
;;     var represent = arguments.callee;
;;     var s;
;;     switch(typeof(thing)) {
;;     case 'string':
;;         s = '\"' + thing + '\"';
;;         break;
;;     case 'number':
;;         s = thing;
;;         break;
;;     case 'object':
;;         var names = [];
;;         for(var name in thing)
;;             names.push(name);

;;         s = thing;
;;         if(names.length > 0) {
;;             s += ' - {';
;;             s += names.slice(0, 7).map(function(n) {
;;                 var repr = n + ': ';
;;                 try {
;;                     if(thing[n] === null)
;;                         repr += 'null';
;;                     else if(typeof(thing[n]) == 'object')
;;                         repr += '{...}';
;;                     else
;;                         repr += represent(thing[n]);
;;                 } catch(e) {
;;                     repr += '[Exception!]'
;;                 }
;;                 return repr;
;;             }).join(', ');
;;             if(names.length > 7)
;;                 s += ', ...'
;;             s += '}';
;;         }
;;         break;
;;     case 'function':
;;         s = 'function() {...}';
;;         break;
;;     default:
;;         s = thing;
;;     }
;;     return s;
;; }")

;; (defun reload-chrome ()
;;   "Reload all chrome packages"
;;   (try (chain (aref -cc "@mozilla.org/chrome/chrome-registry;1") 
;; 	      (get-service (@ -ci ns-i-x-u-l-chrome-registry)) (reload-chrome)) 
;;        (:catch nil)))

;; (defun get-windows ()
;;   (defvar window-enum (chain (aref -cc "@mozilla.org/appshell/window-mediator;1")
;; 			     (get-service (@ -ci ns-i-window-mediator))
;; 			     (get-enumerator "")))
;;   (defvar windows (array))
;;   (loop while (chain window-enum (has-more-elements))
;; 	do (chain windows (push (chain window-enum (get-next))))
;; 	finally (return windows)))

;; (defvar outstream)
;; (defvar outstreamutf8)
;; (defvar instream)
;; (defvar instreamutf8)
;; (defvar context)
;; (defvar pump)
;; (defvar session)

;;; - evaluate instead of EVAL?
;;; - using the REPL, util etc instaed of the current parenscript setup

;;; XXX 2015-04-23T22:51:03+00:00 Gabriel Laddel
;;; 
;;; onSocketAccepted and onStopListening are "magic" function calls for
;;; XULrunner. DO NOT DELETE OR RENAME THEM
;;; 
;;; https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIServerSocketListener

;; (ps::inline-js "function onSocketAccepted(serv, transport) {
;;     try {
;;         var outstream = transport.openOutputStream(Ci.nsITransport.OPEN_BLOCKING , 0, 0);
;;         var outstreamutf8 = Cc['@mozilla.org/intl/converter-output-stream;1']
;;             .createInstance(Ci.nsIConverterOutputStream);
;;         outstreamutf8.init(outstream, 'UTF-8', 0, 0);

;;         var instream = transport.openInputStream(0, 0, 0);
;;         var instreamutf8 = Cc['@mozilla.org/intl/converter-input-stream;1']
;;             .createInstance(Ci.nsIConverterInputStream);
;;         instreamutf8.init(instream, 'UTF-8', 1024, 0);
;;     } catch(e) {
;;         lg('E, MOZREPL : Error : ' + e);
;;     }

;;     var context = Cc['@mozilla.org/appshell/window-mediator;1']
;;         .getService(Ci.nsIWindowMediator)
;;         .getMostRecentWindow('');

;;     if(context === null) {
;;         context = Cc['@mozilla.org/appshell/appShellService;1']
;;             .getService(Ci.nsIAppShellService)
;;             .hiddenDOMWindow.wrappedJSObject;
;;     }

;;     var session = new REPL();
;;     session.onOutput = function(string) {
;;         outstreamutf8.writeString(string);
;;     };
;;     session.onQuit = function() {
;;         lg('I, MOZREPL : Client closed connection : ' + transport.host + ':' + transport.port);        
;;         instream.close();
;;         outstream.close();
;;         sessions.remove(session);
;;     };
;;     session.init(context);

;;     lg('I, MOZREPL : Client connected : ' + transport.host + ':' + transport.port +
;;         ' : ' + (context instanceof Ci.nsIDOMWindow ?
;;                  context.document.location.href : context));

;;;     var pump = Cc['@mozilla.org/network/input-stream-pump;1']
;;         .createInstance(Ci.nsIInputStreamPump);
;;     pump.init(instream, -1, -1, 0, 0, false);
;;     pump.asyncRead({
;;         onStartRequest: function(request, context) {},
;;         onStopRequest: function(request, context, status) {
;;                 session.quit();
;;             },
;;         onDataAvailable: function(request, context, inputStream, offset, count) {
;;             var str = {}
;;             instreamutf8.readString(count, str)
;;             session.receive(str.value);
;;             }
;;         }, null);

;;     sessions.add(session);
;; }")
(start port
