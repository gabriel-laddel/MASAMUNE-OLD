(in-package mm)

;;; books
;;; ============================================================================
;;; introduction to algorithms
;;; algorithm design
;;; art of computer programming
;;; hackers delight
;;; 
;;; websites 
;;; ============================================================================
;;; 'smart tool' haskell guy
;;;
;;; data structures
;;; ============================================================================
;;; - finger trees
;;; - red black trees
;;; - AVL trees

(defun start-programming-practice (habit)
  (record-event habit (event :started))
  (stumpwm::emacs)
  ;; XXX 2014-12-23T14:16:06+00:00 Gabriel Laddel
  ;; always throws
  (ignore-errors 
   (with-live-swank-connection 
       (swank::eval-in-emacs
	'(progn (find-file "~/quicklisp/local-projects/masamune/systems/programming-practice.lisp")
	  (delete-other-windows)))))
  (stumpwm::run-with-timer
   (* 20 60) nil 
   (lambda () 
     (with-live-swank-connection
	 (stumpwm::message-no-timeout "Time is almost up")
       (loop for i from 10 downto 0
	     finally (progn (record-event habit (event :finished))
			    (stumpwm::message-no-timeout "finished")
			    (mmg::run-or-focus-dashboard)))))))

(defun visualize-programming-practice (habit sheet)
  (declare (ignore habit))
  (format sheet "Problems remaining on project euler~%Algorithm problems completed today~%Avg. completion time per problem"))

(defun programming-practice-install ()
  (push (i 'habit
	   :name "Programming Practice"
	   :initialization-function 'start-programming-practice
	   :visualization-function 'visualize-programming-practice
	   :occurrence :daily)
	*habits*))

;;; Project Euler
;;; ============================================================================

(defun download-problems ()
  (unless (probe-file (qlpp "/project-euler/")) 
    (mkdir (qlpp "/project-euler/")))
  (download-url "http://kmkeen.com/local-euler/project_euler.zip" 
		(qlpp "project-euler/project-euler-extra-files.zip"))
  (download-url "http://kmkeen.com/local-euler/project_euler.txt" 
		(qlpp "project-euler/problems.txt")))

(fiasco:define-test-package #:euler
  (:use #:mm #:fiasco))

(in-package #:euler)

(deftest 1 ()
  ( ))

(let* ((solution '(loop for n from 1 below 1000 when (or (= 0 (mod n 5)) (= 0 (mod n 3))) sum n))
       (answer ))
  (car (mm::split " " (rp (format nil "echo -n ~a  | md5sum" (eval solution))))))

(take 4 )

(defun parse-problems-textfile ()
  (let* ((i1 (butlast (mm::split "Problem" (mm::slurp-file (mm::qlpp "/project-euler/problems.txt"))))))
    (loop for p in i1
	  do )))


(
 " 1
=========


   If we list all the natural numbers below 10 that are multiples of 3 or 5,
   we get 3, 5, 6 and 9. The sum of these multiples is 23.

   Find the sum of all the multiples of 3 or 5 below 1000.

   
   Answer: e1edf9d1967ca96767dcc2b2d6df69f4


"
 " 2
=========


   Each new term in the Fibonacci sequence is generated by adding the
   previous two terms. By starting with 1 and 2, the first 10 terms will be:

                     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

   By considering the terms in the Fibonacci sequence whose values do not
   exceed four million, find the sum of the even-valued terms.

   
   Answer: 4194eb91842c8e7e6df099ca73c38f28


"
 " 3
=========


   The prime factors of 13195 are 5, 7, 13 and 29.

   What is the largest prime factor of the number 600851475143 ?

   
   Answer: 94c4dd41f9dddce696557d3717d98d82


")






266333
echo -n '266333' | md5sum

